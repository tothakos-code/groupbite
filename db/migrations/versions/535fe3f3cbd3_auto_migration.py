"""auto_migration

Revision ID: 535fe3f3cbd3
Revises: 50d5fa442754
Create Date: 2025-07-29 22:21:57.433286

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '535fe3f3cbd3'
down_revision = '50d5fa442754'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('menu_item', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('order', 'order_fee',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.create_unique_constraint(None, 'user', ['id'])
    op.create_unique_constraint(None, 'vendor', ['id'])
    op.create_unique_constraint(None, 'webhooks', ['id'])
    # ### end Alembic commands ###
    op.execute("""
        -- Migration script to populate order_item table with existing closed orders
        -- This script migrates data from user_basket to order_item for orders with CLOSED state

        BEGIN TRANSACTION;

        -- Insert data into order_item table from existing closed orders
        -- Group by all relevant fields and sum the count to handle duplicates
        INSERT INTO order_item (
            order_id,
            menu_item_id,
            size_id,
            user_id,
            count,
            item_name,
            size_label,
            unit_price,
            total_price
        )
        SELECT
            ub.order_id,
            ub.menu_item_id,
            ub.size_id,
            ub.user_id,
            SUM(ub.count) as count,  -- Sum up counts for duplicate entries
            mi.name as item_name,
            s.name as size_label,
            s.price as unit_price,
            (s.price * SUM(ub.count)) as total_price  -- Calculate total based on summed count
        FROM user_basket ub
        INNER JOIN "order" o ON ub.order_id = o.id
        INNER JOIN menu_item mi ON ub.menu_item_id = mi.id
        INNER JOIN size s ON ub.size_id = s.id
        WHERE o.state_id = 'CLOSED'  -- Assuming OrderState.CLOSED maps to 'CLOSED' string
        GROUP BY
            ub.order_id,
            ub.menu_item_id,
            ub.size_id,
            ub.user_id,
            mi.name,
            s.name,
            s.price
        ORDER BY ub.order_id, ub.menu_item_id, ub.size_id;

        -- Verify the migration by checking counts
        -- This query shows the comparison between original user_basket entries and migrated order_item entries
        SELECT
            'Migration Summary' as description,
            (SELECT COUNT(*) FROM user_basket ub
             INNER JOIN "order" o ON ub.order_id = o.id
             WHERE o.state_id = 'CLOSED') as original_basket_items,
            (SELECT COUNT(*) FROM order_item) as migrated_order_items;

        -- Update order.total_price with sum of order_item.total_price + order_fee
        UPDATE "order"
        SET total_price = COALESCE(order_totals.items_total, 0) + COALESCE(order_fee, 0)
        FROM (
            SELECT
                order_id,
                SUM(total_price) as items_total
            FROM order_item
            GROUP BY order_id
        ) order_totals
        WHERE "order".id = order_totals.order_id
          AND "order".state_id = 'CLOSED';

        -- Show detailed comparison by order
        SELECT
            o.id as order_id,
            o.state_id,
            o.order_fee,
            o.total_price as updated_total_price,
            COUNT(ub.order_id) as basket_items_count,
            COALESCE(oi_counts.order_items_count, 0) as order_items_count,
            COALESCE(oi_totals.items_total, 0) as order_items_total
        FROM "order" o
        LEFT JOIN user_basket ub ON o.id = ub.order_id
        LEFT JOIN (
            SELECT order_id, COUNT(*) as order_items_count
            FROM order_item
            GROUP BY order_id
        ) oi_counts ON o.id = oi_counts.order_id
        LEFT JOIN (
            SELECT order_id, SUM(total_price) as items_total
            FROM order_item
            GROUP BY order_id
        ) oi_totals ON o.id = oi_totals.order_id
        WHERE o.state_id = 'CLOSED'
        GROUP BY o.id, o.state_id, o.order_fee, o.total_price, oi_counts.order_items_count, oi_totals.items_total
        ORDER BY o.id;

        COMMIT;
    """)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'webhooks', type_='unique')
    op.drop_constraint(None, 'vendor', type_='unique')
    op.drop_constraint(None, 'user', type_='unique')
    op.alter_column('order', 'order_fee',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('menu_item', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    # ### end Alembic commands ###
    op.execute("DELETE FROM order_item")
